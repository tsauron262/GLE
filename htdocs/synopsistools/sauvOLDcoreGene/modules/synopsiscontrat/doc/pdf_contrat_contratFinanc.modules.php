<?php

/*
 * BIMP-ERP by Synopsis et DRSI
 *
 * Author: Tommy SAURON <tommy@drsi.fr>
 * Licence : Artistic Licence v2.0
 *
 * Version 1.2
 * Created on : 30 mars 2011
 *
 * Infos on http://www.finapro.fr
 *
 */
/**
 *
 * Name : pdf_contrat_courrierBIMPsignature.modules.php
 * BIMP-ERP-1.2
 */
require_once(DOL_DOCUMENT_ROOT . "/core/modules/synopsiscontrat/modules_synopsiscontrat.php");
require_once(DOL_DOCUMENT_ROOT . "/product/class/product.class.php");
require_once(DOL_DOCUMENT_ROOT . "/core/lib/company.lib.php");
require_once DOL_DOCUMENT_ROOT . '/core/lib/pdf.lib.php';






//TODO  addresse livraison liÃ© au contrat
//TODO filtre sur statuts ???

/**
  \class      pdf_contrat_babel
  \brief      Classe permettant de generer les contrats au modele babel
 */
if (!defined('EURO'))
    define('EURO', chr(128));

class pdf_contrat_contratFinanc extends ModeleSynopsiscontrat {

    public $emetteur;    // Objet societe qui emet
    var $contrat;
    var $pdf;
    var $margin_bottom = 25;

    /**
      \brief      Constructeur
      \param        db        Handler acces base de donnee
     */
    function __construct($db) {




        global $conf, $langs, $mysoc;

        $langs->load("main");
        $langs->load("bills");
        $this->debug = "";
        $this->db = $db;
        $this->name = "babel";
        $this->description = $langs->trans('PDFContratSynopsisDescription');

        // Dimension page pour format A4
        $this->type = 'pdf';
        $this->page_largeur = 210;
        $this->page_hauteur = 297;
        $this->format = array($this->page_largeur, $this->page_hauteur);
        $this->marge_gauche = 25;
        $this->marge_droite = 15;
        $this->marge_haute = 40;
        $this->marge_basse = 125;

        $this->option_logo = 1;                    // Affiche logo
        // Recupere emmetteur
        $this->emetteur = $mysoc;
        if (!$this->emetteur->pays_code)
            $this->emetteur->pays_code = substr($langs->defaultlang, -2);    // Par defaut, si n'etait pas defini
    }

    /**
     * Print chapter
     * @param $num (int) chapter number
     * @param $title (string) chapter title
     * @param $file (string) name of the file containing the chapter body
     * @param $mode (boolean) if true the chapter body is in HTML, otherwise in simple text.
     * @public
     */
    public function PrintChapter($num, $title, $file, $mode = false) {
        
        // add a new page
        $this->pdf->AddPage();
        
		$this->addLogo($this->pdf, 30);
        //$this->_pagehead($this->pdf, $this->contrat);
        // disable existing columns
        $this->pdf->resetColumns();
        // print chapter title
        $this->ChapterTitle($num, $title);
        // set columns
        $this->pdf->setEqualColumns(3, 63);
        
        // print chapter body
        $this->ChapterBody($file, $mode);
    }
    
    public function addLogo(&$pdf, $size){
        global $conf;
        $logo=$conf->mycompany->dir_output.'/logos/'.$this->emetteur->logo;
                        $pdf->Image($logo, 0, 0, 0, $size,'','','',false,300,'C');
    }

    /**
     * Set chapter title
     * @param $num (int) chapter number
     * @param $title (string) chapter title
     * @public
     */
    public function ChapterTitle($num, $title) {
        $this->pdf->SetFont('helvetica', '', 11);
        $this->pdf->SetFillColor(255, 255, 255);
        $this->pdf->Cell($this->page_largeur - $this->marge_droite - $this->marge_gauche, 6, $title . $num, 0, 1, 'C', 0);
        $this->pdf->Ln(4);
    }

    /**
     * Print chapter body
     * @param $file (string) name of the file containing the chapter body
     * @param $mode (boolean) if true the chapter body is in HTML, otherwise in simple text.
     * @public
     */
    public function ChapterBody($file, $mode = false) {
        $this->pdf->selectColumn();
        // get esternal file content
        $content = file_get_contents($file, false);
        $tabContent = explode("\n", $content);
        // set font
        $this->pdf->SetFont('', '', 7);
        $this->pdf->SetTextColor(50, 50, 50);
        // print content
        if ($mode) {
            // ------ HTML MODE ------
            $this->pdf->writeHTML($content, true, false, true, false, 'J');
        } else {
            // ------ TEXT MODE ------
            //$this->pdf->setCellMargins(0,0,0,10);
            foreach ($tabContent as $id => $ligne) {
                if ($this->pdf->getY() < 500 && $this->pdf->getX() < 60 && (count($tabContent) - $id) < 17)
                    $this->pdf->SetAutoPageBreak(1, 55);

                $style = "";
                if (stripos($ligne, "<g>") > -1) {
                    $ligne = str_replace("<g>", "", $ligne);
                    $titre = true;
                    $style .= 'B';
                }
                if (stripos($ligne, "<i>") > -1) {
                    $ligne = str_replace("<i>", "", $ligne);
                    $style .= 'I';
                }
                if (stripos($ligne, "<s>") > -1) {
                    $ligne = str_replace("<s>", "", $ligne);
                    $style .= 'U';
                }
                $this->pdf->SetFont('', $style, 6.5);
                $this->pdf->Write(0, $ligne . "\n", '', 0, 'J', true, 0, false, true, 0);
            }
        }
        $this->pdf->Ln();
    }

    /**
      \brief      Fonction generant la contrat sur le disque
      \param        contrat            Objet contrat a generer (ou id si ancienne methode)
      \param        outputlangs        Lang object for output language
      \return        int             1=ok, 0=ko
     */
    function write_file($contrat, $outputlangs = '') {
        global $user, $langs, $conf;

        if (!is_object($outputlangs))
            $outputlangs = $langs;
        $outputlangs->load("main");
        $outputlangs->load("dict");
        $outputlangs->load("companies");
        $outputlangs->load("bills");
        $outputlangs->load("contrat");
        $outputlangs->load("products");
        //$outputlangs->setPhpLang();
        if ($conf->synopsiscontrat->dir_output) {
            // Definition de l'objet $contrat (pour compatibilite ascendante)
            if (!is_object($contrat)) {
                $id = $contrat;
                require_once(DOL_DOCUMENT_ROOT . "/contrat/class/contrat.class.php");
                $contrat = new Contrat($this->db);
                $contrat->fetch($id);
                $contrat->fetch_lines(true);
//                $contrat = new ContratMixte($this->db);
//                $ret=$contrat->fetch($id);
            } else {
                $contrat->fetch_lines(true);
            }

            $contrat->societe = new Societe($this->db);
            $contrat->societe->fetch($contrat->socid);

            // Definition de $dir et $file
            if ($contrat->specimen) {
                $dir = $conf->synopsiscontrat->dir_output;
                $file = $dir . "/SPECIMEN.pdf";
            } else {
                $propref = sanitize_string($contrat->ref);
                $dir = $conf->synopsiscontrat->dir_output . "/" . $propref;
                $file = $dir . "/Contrat_de_financement_" . date("d_m_Y") . "_" . $propref . ".pdf";
            }
            $this->contrat = $contrat;

            require_once (DOL_DOCUMENT_ROOT . "/synopsisfinanc/class/synopsisfinancement.class.php");
            $valfinance = new Synopsisfinancement($this->db);
            $valfinance->fetch(NULL, NULL, $this->contrat->id);
            $valfinance->calcul();

            require_once(DOL_DOCUMENT_ROOT . "/comm/propal/class/propal.class.php");
            $propal = new Propal($this->db);
            $propal->fetch($valfinance->propal_id);

            if (!file_exists($dir)) {
                if (dol_mkdir($dir) < 0) {
                    $this->error = $langs->trans("ErrorCanNotCreateDir", $dir);
                    return 0;
                }
            }

            if (file_exists($dir)) {
                $pdf = "";
                $nblignes = sizeof($contrat->lignes);
                // Protection et encryption du pdf
                $pdf = pdf_getInstance($this->format);
                $this->pdf = $pdf;
                if (class_exists('TCPDF')) {
                    if (get_class($pdf) == "FPDI") {
                        if($valfinance->banque!="Grenke")
                            $logo_B="finapro";
                        else
                            $logo_B="lease";
                        $pdf = getNewPdf($this->format,$logo_B);
                        $this->pdf = $pdf;
                    }
                    
                    $pdf->setPrintHeader(true);
                    $pdf->setPrintFooter(true);
                }

//                $pdf1 = pdf_getInstance($this->format);
//                if (class_exists('TCPDF')) {
//                    $pdf1->setPrintHeader(false);
//                    $pdf1->setPrintFooter(false);
//                }


                $pdf->Open();
                //$pdf1->Open();
                $pdf->AddPage();
                //$pdf1->AddPage();
                //$pdf1->SetFont(''/* 'Arial' */, '', 8);

                $pdf->SetDrawColor(128, 128, 128);


                $pdf->SetTitle($contrat->ref);
                $pdf->SetSubject($outputlangs->transnoentities("Contract"));
                $pdf->SetCreator("BIMP-ERP " . DOL_VERSION);
                $pdf->SetAuthor($user->getFullName($langs));

                $pdf->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);   // Left, Top, Right
                //$pdf1->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);   // Left, Top, Right
                $pdf->SetAutoPageBreak(1, $this->margin_bottom);


                //$pdf->AddFont('VeraMoBI', 'BI', 'VeraMoBI.php');
                //$pdf->AddFont('fq-logo', 'Roman', 'fq-logo.php');
                // Tete de page
                //$this->_pagehead($pdf, $contrat, 1, $outputlangs);
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                
                
                
                
		$this->addLogo($pdf, 40);

//locataire/////////////////////////////////////////////////////////////////////
                $pdf->SetXY($this->marge_gauche, $this->marge_haute - 6);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche), 6, "CONTRAT DE LOCATION NÂ° " . $this->contrat->ref, 0, 'C');
                $pdf->SetXY($this->marge_gauche, $this->marge_haute);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 100), 6, "Le locataire:", 0, 'L');
                $pdf->SetFont(''/* 'Arial' */, '', 8);
                $pdf->SetXY($this->marge_gauche, $this->marge_haute + 6);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 100), 6, "La sociÃ©tÃ©: " . $contrat->societe->nom, 0, 'L');
                $pdf->SetXY($this->marge_gauche + 60, $this->marge_haute + 6);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, $contrat->societe->forme_juridique . (($contrat->societe->capital > 0) ? " au capital de " . price($contrat->societe->capital) . " â¬" : ""), 0, 'L');
                $pdf->setX($this->marge_gauche);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "ImmatriculÃ© sous le NumÃ©ro RCS: " . $contrat->societe->idprof4, 0, 'L');
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Dont le siÃ¨ge sociale est situÃ© au " . $contrat->societe->address . " " . $contrat->societe->zip . " " . $contrat->societe->town, 0, 'L');
                /* requete pour le reprÃ©sentant */
                $contact = $contrat->Liste_Contact(-1, "external");
                $nomC = "";
                foreach ($contact as $key => $value) {
                    if ($value["fk_c_type_contact"] == 22) {
                        $idcontact = $value["id"];
                        $cont = new Contact($this->db);
                        $cont->fetch($idcontact);
                        $nomC = "ReprÃ©sentÃ©e par " . $cont->getFullName($langs);
                        $grade = $cont->poste;
                        if ($grade != "") {
                            $nomC.=" intervenant en qualitÃ© de " . $grade;
                        }
                    }
                }

                /* fin requete */
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, $nomC, 0, 'L');
                $pdf->SetXY($this->marge_gauche + 100, $this->marge_haute + 24);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "", 0, 'L');

//le loueur/////////////////////////////////////////////////////////////////////
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->SetX($this->marge_gauche);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Le loueur:", 0, 'L');

                $pdf->SetFont(''/* 'Arial' */, '', 8);
                //print_r($this->emetteur);
                //$pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "La SociÃ©tÃ© " . $this->emetteur->name . ", " . getFormeJuridiqueLabel($this->emetteur->forme_juridique_code) . (($this->emetteur->capital > 0) ? " au capital de " . price($this->emetteur->capital) . " â¬" : "" ) . " dont le siÃ¨ge social est situÃ© Ã  " . $this->emetteur->town . " (" . $this->emetteur->zip . "), " . $this->emetteur->address . ", enregistrÃ©e sous le numÃ©ro RCS: " . $this->emetteur->idprof4 . ",", 0, 'L'); //print_r($this->emetteur);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "La SociÃ©tÃ© FINAPRO, SARL au capital de 50 000â¬ dont le siÃ¨ge social est situÃ© Ã  Jouques (13490), Parc du Deffend - 23 boulevard du Deffend, enregistrÃ©e sous le nÂ° 443 247 978 au RCS d'Aix en Provence,", 0, 'L'); //print_r($this->emetteur);
                $contact = $contrat->Liste_Contact(-1, "internal");
                $nomC = "";
//                foreach ($contact as $key => $value) {
//                    if ($value["fk_c_type_contact"] == 10) {
//                        $idcontact = $value["id"];
//                        $cont = new User($this->db);
//                        $cont->fetch($idcontact);
//                        $nomC = "ReprÃ©sentÃ©e par " . $cont->getFullName($langs);
//                        $grade = $cont->job;
//                        if ($grade != "") {
//                            $nomC.=" intervenant en qualitÃ© de " . $grade . ".";
//                        }
//                    }
//                }
                $nomC = "ReprÃ©sentÃ©e par Madame Patricia RODDIER, intervenant en qualitÃ© de GÃ©rante";
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, $nomC, 0, 'L');
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Le loueur donne en location, lâÃ©quipement dÃ©signÃ© ci-dessous (ci-aprÃ¨s Â« Ã©quipement Â»), au locataire qui l'accepte, aux Conditions GÃ©nÃ©rales ci-annexÃ©es composÃ©es de deux pages recto et aux Conditions ParticuliÃ¨res suivantes :", 0, 'L');

//description de l'Ã©quipement///////////////////////////////////////////////////
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche), 6, "", 0, 'L');
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->SetX($this->marge_gauche);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Description de l'Ã©quipement:", 0, 'L');
//tableau rÃ©capitulatif/////////////////////////////////////////////////////////
                $W = ($this->page_largeur - $this->marge_droite - $this->marge_gauche) / 12;

//////////////////entete du tableau/////////////////////////////////////////////
//qte
                $pdf->SetFont(''/* 'Arial' */, '', 9);
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->Cell($W * 1, 6, "QuantitÃ©", 1, null, 'L', true);
//designation
                $X = $this->marge_gauche + $W;
                $pdf->setX($X);
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->Cell($W * 7, 6, "DÃ©signation du matÃ©riels", 1, null, 'L', true);
                $M_N = false;
//marque
                /* $X=$this->marge_gauche+$W*8;
                  $pdf->setX($X);
                  $pdf->setColor('fill', 230, 230, 250);
                  $pdf->Cell($W, 6, "Marque", 1, null, 'L', true);
                 * $M_N=true;
                 */
//num de sÃ©rie
                if ($M_N == true) {
                    $X = $this->marge_gauche + $W * 10;
                } else {
                    $X = $this->marge_gauche + $W * 8;
                }
                $pdf->setX($X);
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->MultiCell($W * 2, 6, "NÂ° de sÃ©rie", 1, 'L', true);

////////////////fin entete du tableau///////////////////////////////////////////
////////////////debut corps tableau/////////////////////////////////////////////
                $X = $this->marge_gauche;
                $color_id = 0;
                foreach ($propal->lines as $obj) {
                    if ($color_id == 0) {
                        $pdf->setColor('fill', 255, 255, 255);
                    } else {
                        $pdf->setColor('fill', 235, 235, 235);
                    }
                    if ($obj->fk_product) {
                        $prod = new product($this->db);
                        $prod->fetch($obj->fk_product);

                        $X = $this->marge_gauche;
                        $pdf->Cell($W, 6, $obj->qty, 1, NULL, 'L', true);
                        $X = $this->marge_gauche + $W;
                        $pdf->setX($X);
                        $pdf->Cell($W * 7, 6, dol_trunc($prod->ref . " - " . $prod->libelle . " - " . $obj->desc, 49), 1, NULL, 'L', TRUE);
                        $X = $this->marge_gauche + $W * 8;
                        $pdf->setX($X);
                        if ($M_N == true) {
                            $pdf->Cell($W, 6, "marque", 1, null, 'L', true);
                            $X = $this->marge_gauche + $W * 10;
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        } else {
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        }
                        $color_id = ($color_id + 1) % 2;
                    } else {

                        $X = $this->marge_gauche;
                        $pdf->Cell($W, 6, $obj->qty, 1, NULL, 'L', true);
                        $X = $this->marge_gauche + $W;
                        $pdf->setX($X);
                        $pdf->Cell($W * 7, 6, dol_trunc($obj->desc, 49), 1, NULL, 'L', TRUE);
                        $X = $this->marge_gauche + $W * 8;
                        $pdf->setX($X);
                        if ($M_N == true) {
                            $pdf->Cell($W, 6, "marque", 1, null, 'L', true);
                            $X = $this->marge_gauche + $W * 10;
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        } else {
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        }
                        $color_id = ($color_id + 1) % 2;
                    }
                }
//fin corps tableau/////////////////////////////////////////////////////////////
//fin tableau///////////////////////////////////////////////////////////////////
//
//
//Ã©volution de l'Ã©quipement/////////////////////////////////////////////////////
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche), 6, "", 0, 'L');
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->SetX($this->marge_gauche);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Evolution de l'Ã©quipement:", 0, 'L');
                $pdf->SetFont(''/* 'Arial' */, '', 8);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Le locataire pourra demander au bailleur, au cours de la pÃ©riode de validitÃ© du prÃ©sent contrat la modification de lâÃ©quipement informatique remis en location. Les modifications Ã©ventuelles du contrat seront dÃ©terminÃ©es par lâaccord des parties.", 0, 'L');
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Cette modification pourra porter sur tout ou partie des Ã©quipements, par adjonction, remplacement et/ou enlÃ¨vement des matÃ©riels repris dans lâarticle 1 ci-dessus.", 0, 'L');

//rÃ©cap du loyer////////////////////////////////////////////////////////////////
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche), 6, "", 0, 'L');
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Le loyers:", 0, 'L');
                //$pdf->SetXY($this->marge_gauche, $this->marge_haute + 126);
                $pdf->SetFont(''/* 'Arial' */, '', 8);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche), 6, "Le loyer ferme et non rÃ©visable en cours de contrat, payable par terme Ã  Ã©choir, par prÃ©lÃ¨vements automatiques est fixÃ© Ã  :", 0, 'L');

                $X = $this->marge_gauche;
                //$Y = $this->marge_haute + 132;
                if ($valfinance->VR > 0) {
                    $W = ($this->page_largeur - $this->marge_droite - $this->marge_gauche) / 5;
                } else {
                    $W = ($this->page_largeur - $this->marge_droite - $this->marge_gauche) / 4;
                }

///////////////////////debut tableau////////////////////////////////////////////
                $pdf->SetX($X);
//entete////////////////////////////////////////////////////////////////////////
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->Cell($W, 6, "NOMBRE DE LOYERS", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                $pdf->Cell($W, 6, "MONTANT HT", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                $pdf->Cell($W, 6, "PERIODICITE", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                if ($valfinance->VR > 0) {
                    $pdf->Cell($W, 6, "DUREE", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                    $pdf->MultiCell($W, 6, "VR", 1, 'C', FALSE, 1, NULL, null, null, null, null, null, null, 'M');
                } else {
                    $pdf->MultiCell($W, 6, "DUREE", 1, 'C', FALSE, 1, NULL, null, null, null, null, null, null, 'M');
                }
//fin entete////////////////////////////////////////////////////////////////////
                //$pdf->SetX($X);
//debut corps///////////////////////////////////////////////////////////////////
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->SetFont('', '', 8);
                $pdf->Cell($W, 6, $valfinance->nb_periode, 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                //$pdf->setColor('fill', 230, 230, 250);
                $pdf->Cell($W, 6, price($valfinance->loyer1 + 0.005) . " â¬", 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                //$pdf->setColor('fill', 230, 230, 250);
                $pdf->Cell($W, 6, Synopsisfinancement::$TPeriode[$valfinance->periode], 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                //$pdf->setColor('fill', 230, 230, 250);
                if ($valfinance->VR > 0) {
                    $pdf->Cell($W, 6, $valfinance->nb_periode . " " . Synopsisfinancement::$tabM[$valfinance->periode], 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                    $pdf->MultiCell($W, 6, price($valfinance->VR) . " â¬", 1, 'C', true, 1, NULL, null, null, null, null, null, null, 'M');
                } else {
                    $pdf->MultiCell($W, 6, $valfinance->nb_periode . " " . strtolower(Synopsisfinancement::$tabM[$valfinance->periode]), 1, 'C', true, 1, NULL, null, null, null, null, null, null, 'M');
                }
//fin corps/////////////////////////////////////////////////////////////////////
//transition
                if ($valfinance->pourcent_degr > 0 && $valfinance->duree_degr > 0) {
                    $pdf->MultiCell($W, 6, "suivie de:", 0, 'L');
//fin transition
//
//entete dÃ©gresif
//
                    $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                    $pdf->Cell($W, 6, "NOMBRE DE LOYERS", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                    $pdf->Cell($W, 6, "MONTANT HT", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                    $pdf->Cell($W, 6, "PERIODICITE", 1, NULL, 'C', FALSE, NULL, NULL, null, null, 'C');
                    $pdf->MultiCell($W, 6, "DUREE", 1, 'C', FALSE, 1, NULL, null, null, null, null, null, null, 'M');
//
//fin entete degressif
//corps prix dÃ©gressif
//
                    $pdf->SetFont('', '', 8);
                    $pdf->Cell($W, 6, $valfinance->nb_periode2, 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                    $pdf->Cell($W, 6, price($valfinance->loyer2 + 0.005) . " â¬", 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                    $pdf->Cell($W, 6, Synopsisfinancement::$TPeriode[$valfinance->periode], 1, NULL, 'C', TRUE, NULL, NULL, null, null, 'C');
                    $pdf->MultiCell($W, 6, $valfinance->nb_periode2 . " " . Synopsisfinancement::$tabM[$valfinance->periode], 1, 'C', true, 1, NULL, null, null, null, null, null, null, 'M');
                }
//
//fin corps prix dÃ©gressif
//////////////////////////////////fin tableau///////////////////////////////////


                $X = $this->marge_gauche;

                //$Y = $Y + 18;
                $pdf->SetX($X);
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->Write(6, "Site d'installation: ");
                $pdf->SetFont(''/* 'Arial' */, '', 8);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, $contrat->societe->address . " Ã  " . $contrat->societe->town, 0, 'L', FALSE, 1, NULL, null, null, null, null, null, null, 'M');
                //$pdf->Write(6, $contrat->societe->address . " Ã  " . $contrat->societe->town);
                //$Y = $Y + 6;
                //
                $pdf->SetX($X);
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->Write(6, "Date d'installation: ");
                $pdf->SetFont(''/* 'Arial' */, '', 8);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, dol_print_date($propal->date_livraison), 0, 'L', false, 1, NULL, null, null, null, null, null, null, 'M');
                //$pdf->Write(6, dol_print_date($propal->date_livraison));
                //$Y = $Y + 6;
                //$pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6,"", 0, 'L', false, 1, NULL, null, null, null, null, null, null, 'M');
                //$pdf->SetX($X);
                $pdf->SetFont(''/* 'Arial' */, 'B', 9);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Clause spÃ©cifique: ", 0, 'L', false, 1, NULL, null, null, null, null, null, null, 'M');
                //$pdf->Write(6, "Clause spÃ©cifique: ");
                //$Y = $Y + 6;
                //$pdf->SetX($X, $Y);
                $pdf->SetFont(''/* 'Arial' */, '', 8);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - $this->marge_gauche, 6, "Fait en autant d'exemplaires que de parties, un pour chacune des parties", 0, 'L', false, 1, NULL, null, null, null, null, null, null, 'M');
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - $this->marge_gauche, 6, "ANNEXE : Conditions GÃ©nÃ©rales composÃ©es de deux pages recto", 0, 'L', false, 1, NULL, null, null, null, null, null, null, 'M');

                //$Y = $Y + 12;
                //$pdf->Set($X);
                $pdf->MultiCell($this->page_largeur - $this->marge_droite - ($this->marge_gauche + 200), 6, "Fait Ã  Lyon le " . dol_print_date($contrat->date_contrat), 0, 'L', false, 1, NULL, null, null, null, null, null, null, 'M');
                //$pdf->Write(6, "Fait Ã  Lyon le " . dol_print_date($contrat->date_contrat));
                //emplacement des signature
                $W = ($this->page_largeur - $this->marge_droite - $this->marge_gauche) / 3;
                //locataire
                $pdf->SetAutoPageBreak(1, 0);
                if($valfinance->banque== "Grenke" || $valfinance->banque=="BNP"){
                    $pdf->MultiCell($W, 6, "Pour le Locataire" . "\n" . "Signature et cachet(lu et approuvÃ©)" . "\n" . "QualitÃ©" . "\n" . "NOM", 0, 'L', false, 0);


                //loueur
                $X = $X + $W;
                $pdf->SetX($X);
                $pdf->MultiCell($W, 6, "Pour le Loueur" . "\n" . "Signature et cachet", 0, 'C', false, 0);

                //cessionnaire
                $X = $X + $W;
                $pdf->SetX($X);
                $pdf->MultiCell($W, 6, "Pour le Cessionnaire" . "\n" . "Signature et cachet", 0, 'C', false, 0);
            }
                $pdf->SetAutoPageBreak(1, $this->margin_bottom);

                $X = $this->marge_gauche;
                $pdf->SetX($X);

                $this->marge_gauche = $this->marge_gauche - 25;
                $this->marge_droite = $this->marge_droite - 5; /* TODO */
                $this->marge_haute = $this->marge_haute - 5;
                $pdf->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);   // Left, Top, Right

//                if ($valfinance->banque != "") {
//                    if (file_exists(DOL_DATA_ROOT . '/synopsisfinanc/doc/banque_' . $valfinance->banque . '.txt')) {
//                        $this->PrintChapter($this->contrat->ref, 'ANNEXE: CONDITION GENERALES DU CONTRAT DE LOCATION NÂ° ', DOL_DOCUMENT_ROOT . '/synopsisfinanc/doc/banque_' . $valfinance->banque . '.txt', false);
//                    }/* else {
//                        $this->PrintChapter($this->contrat->ref, 'ANNEXE: CONDITION GENERALES DU CONTRAT DE LOCATION NÂ° ', DOL_DOCUMENT_ROOT . '/synopsisfinanc/doc/banque_test.txt', false);
//                    }*/
//                } else {
                    $this->PrintChapter($this->contrat->ref, 'ANNEXE: CONDITION GENERALES DU CONTRAT DE LOCATION NÂ° ', DOL_DOCUMENT_ROOT . '/synopsisfinanc/doc/banque_test.txt', false);
//                }

                $pdf->SetAutoPageBreak(1, 0);
                $pdf->setFont('', '', 8);
                $X = $this->marge_gauche + 10;
                $pdf->SetXY($X, $this->page_hauteur - 50);
                $W = ($this->page_largeur - $this->marge_droite - $this->marge_gauche) / 3;
                if($valfinance->banque== "Grenke" || $valfinance->banque=="BNP"){
                $pdf->MultiCell($W, 6, "Pour le locataire" . "\n" . "Signature et cachet(lu et approuver)" . "\n" . "\n" . "QualitÃ©" . "\n" . "\n" . "Nom", 0, 'L');
                $X = $X + $W;
                $pdf->SetXY($X, $this->page_hauteur - 50);
                $pdf->MultiCell($W, 6, "Pour le loueur", 0, 'C');
                $X = $X + $W;
                $pdf->SetXY($X, $this->page_hauteur - 50);
                $pdf->MultiCell($W, 6, "Pour le Cessionnaire", 0, 'C');
                }
                $pdf->SetAutoPageBreak(1, 55);

//                $this->_pagefoot($pdf,Pour le loueur $outputlangs);

                if (method_exists($pdf, 'AliasNbPages'))
                    $pdf->AliasNbPages();
                $pdf->Close();

                $this->file = $file;
                $pdf->Output($file, 'f');

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
                if ($valfinance->pourcent_degr > 0 && $valfinance->duree_degr > 0) {
                    $file = $dir . "/Condition_d_evolution.pdf";

                    if (file_exists($dir)) {
                        $pdf = "";
                        $nblignes = sizeof($contrat->lignes);
                        // Protection et encryption du pdf
                        $pdf = pdf_getInstance($this->format);
                        $this->pdf = $pdf;
                        if (class_exists('TCPDF')) {
                            if (get_class($pdf) == "FPDI") {
                                if($valfinance->banque!="Grenke")
                            $logo_B="finapro";
                        else
                            $logo_B="lease";
                        $pdf = getNewPdf($this->format,$logo_B);
                                $this->pdf = $pdf;
                            }
                            $pdf->setPrintHeader(true);
                            $pdf->setPrintFooter(true);
                        }
                    }

                    $pdf->annulenb_page = true;

                    $pdf->Open();

                    $pdf->SetDrawColor(128, 128, 128);


                    $pdf->SetTitle($contrat->ref);
                    $pdf->SetSubject($outputlangs->transnoentities("Contract"));
                    $pdf->SetCreator("BIMP-ERP " . DOL_VERSION);
                    $pdf->SetAuthor($user->getFullName($langs));

//                    $pdf->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);   // Left, Top, Right

                    $pdf->AddPage();
//                    $this->marge_gauche = $this->marge_gauche - 10 + 25;
                    $this->marge_gauche = 20;
                    $this->marge_droite = 25;
                    $x = $this->marge_gauche;
                    $y = $this->marge_haute;
                    $pdf->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);

                    $pdf->SetXY($x, $y);

                    $pdf->SetFillColor(240, 240, 250);
                    $pdf->setFont('', 'B', 16);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "CONDITION D'EVOLUTION", 1, 'C', true, 1, null, null, null, null, null, null, null, 'M');

                    $y = $pdf->GetY() + 6;
                    $pdf->SetXY($x, $y);
                    $pdf->setFont('', '', 12);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "CONTRAT NÂ°" . $this->contrat->ref . " CONCLUE ENTRE:", 0, 'L', false, 1, null, null, null, null, null, null, null, 'M');
                    //le locataire
                    $y = $pdf->GetY() + 6;
                    $pdf->SetXY($x, $y);
                    $pdf->setFont('', 'B', 9);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "   LE LOCATAIRE", 1, 'L', false, 1, null, null, null, null, null, null, null, 'M');
                    //sa description
                    $y = $pdf->GetY();
                    $pdf->SetXY($x, $y);
                    $pdf->setFont('', '', 8);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "     " . $contrat->societe->nom . "\n     " . $contrat->societe->address . "\n\n     " . $contrat->societe->zip . "     " . $contrat->societe->town . "\n     " . "NÂ° RCS: " . $contrat->societe->idprof4, 1, 'L', false, 1);

                    $y = $pdf->GetY() + 6;
                    $pdf->setFont('', 'B', 9);
                    $pdf->SetXY($x, $y);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "   LE LOUEUR", 1, 'L', false, 1, null, null, true, 0, false, true, 0, 'M');

                    $y = $pdf->GetY();
                    $pdf->SetXY($x, $y);
                    $pdf->setFont('', '', 8);
//                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "     " . $this->emetteur->name . "\n     " . $this->emetteur->address . "\n\n     " . $this->emetteur->zip . "     " . $this->emetteur->town . "\n     " . "NÂ° RCS: " . $this->emetteur->idprof4, 1, 'L', false, 1);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "     " . "FINAPRO" . "\n     " . "PARC DU DEFFEND" . "\n\n     " . "23, Boulevard du Deffend" . "     " . "13490 JOUQUES" . "\n     " . "NÂ° RCS: " . "443 247 978", 1, 'L', false, 1);

                    $pdf->setFont('', '', 6.5);
                    $y = $pdf->GetY() + 6;
                    $pdf->SetXY($x, $y);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "ARTICLE 1 â La prÃ©sente convention a pour but de dÃ©finir les conditions commerciales et dâÃ©volution des matÃ©riels informatiques dont les spÃ©cificitÃ©s figurent aux conditions particuliÃ¨res de lâensemble des contrats de location conclus entre le locataire et le loueur.\n", 0, 'J');

                    $y = $pdf->GetY() + 2;
                    $pdf->SetXY($x, $y);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "ARTICLE 2 â Ces conditions dâÃ©volutions sont rattachÃ©es exclusivement aux contrats de location dits ââ taux O%ââ et leurs Ã©volutions. En cas dâannulation ou de remplacement desdits contrats, ces conditions commerciales seront nulles et non avenues. Ces conditions ne peuvent en aucun cas remettre en cause lâensemble des conditions gÃ©nÃ©rales et particuliÃ¨res du contrat de location.\n", 0, 'J');

                    $y = $pdf->GetY() + 2;
                    $pdf->SetXY($x, $y);
                    //die("test functuon".$this->ConvNumberLetter($valfinance->duree,0,0));
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "ARTICLE 3 â A lâissue dâune pÃ©riode irrÃ©vocable, sauf accord Ã©crit entre les deux parties, de " . $this->ConvNumberLetter($valfinance->duree, 0, 0) . " mois et au plus tard au " . $this->ConvNumberLetter($valfinance->duree, 0, 0) . "-iÃ¨me mois de location, la sociÃ©tÃ© " . "FINAPRO" . " offrira la possibilitÃ© au locataire de faire Ã©voluer lâensemble des Ã©quipements informatiques objet du prÃ©sent contrat.\nCette modification se matÃ©rialisera par la mise en place dâun nouveau contrat dont la durÃ©e et le loyer seront identiques au prÃ©sent contrat, si toutefois le pÃ©rimÃ¨tre informatique et/ou financier reste(nt) constant(s).\nSi le nombre de matÃ©riel augmente ou si le locataire dÃ©cide le changement dâarchitecture de son informatique, le loyer ne pourra Ãªtre maintenu constant, et sera calculÃ© proportionnellement aux adjonctions rendues nÃ©cessaires.\nLa modification sâeffectuera soit par remplacement du matÃ©riel soit par adjonction de nouveau matÃ©riel quand cela est possible.\nLe choix du constructeur du nouveau matÃ©riel sera laissÃ© au locataire il devra toutefois faire partie des constructeurs validÃ©s par le loueur.\n", 0, 'J');
                    $pdf->setFont('', 'UI', 6.5);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "Il est expressÃ©ment entendu entre les parties que le fruit de la revente du matÃ©riel Â« sortant Â» du contrat effacera les loyers restant Ã  rÃ©gler.\n", 0, 'L');
                    $y = $pdf->GetY() + 2;
                    $pdf->SetXY($x, $y);
                    $pdf->setFont('', '', 6.5);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "ARTICLE 4 â La modification du matÃ©riel devra toutefois avoir reÃ§ue prÃ©alablement lâaccord du comitÃ© des engagements financiers.\nAprÃ¨s acceptation du comitÃ©, " . "FINAPRO" . " adressera par Ã©crit une proposition dâÃ©volution des Ã©quipements informatiques objet du prÃ©sent contrat. A compter de la rÃ©ception de cette proposition le locataire disposera dâun dÃ©lai de deux mois pour donner son accord Ã  ÃPHÃSUS FINANCES"/* <- se renseigner auprÃ¨s de patricia sur ce nom */ . ", passÃ© ce dÃ©lai si le locataire refuse les Ã©volutions, le prÃ©sent contrat se poursuivra jusqu'Ã  son terme sans que le locataire ne puisse se prÃ©valoir de lâabsence dâÃ©volution pour ne pas respecter ses obligations contractuelles.\n", 0, 'J');
                    $y = $pdf->GetY() + 2;
                    $pdf->SetXY($x, $y);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "ARTICLE 5 â A tous moments le locataire peut mettre fin au prÃ©sent contrat suivant les conditions gÃ©nÃ©rales et lâarticle 11 du prÃ©sent contrat. Toutefois si celle-ci intervient aprÃ¨s une pÃ©riode irrÃ©vocable de " . $valfinance->duree . " mois " . "FINAPRO" . " sâengage Ã  reverser le fruit de la vente du matÃ©riel informatique dÃ©duction faite des frais de re-commercialisation sâÃ©levant Ã  10% du montant du prix dâorigine du matÃ©riel. Le locataire sâengage quant Ã  lui Ã  respecter ses obligations contractuelles.\n", 0, 'J');
                    $pdf->setFont('', 'UI', 6.5);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "Si le locataire dÃ©cide de ne pas bÃ©nÃ©ficier de sa possibilitÃ© dâÃ©volution et mÃ¨ne son contrat au terme, le montant de rachat du dit matÃ©riel sera de 15,00 (quinze euros) au profit du partenaire informatique du locataire.\n", 0, 'J');
                    $pdf->setFont('', '', 6.5);

                    $y = $pdf->GetY() + 6;
                    $pdf->SetXY($x, $y);
                    $w = ($this->page_largeur - $this->marge_gauche - $this->marge_doite) / 2;
                    $pdf->setFont('', 'B', 9);
                    $pdf->MultiCell($w, 6, "LE LOCATAIRE" . "\n" . "Fait Ã " . "\n" . "Le" . "\n" . "Cachet et signature", 0, 'L', FALSE, 0);
                    $pdf->MultiCell($w, 6, "LE LOUEUR" . "\n" . "Fait Ã " . "\n" . "Le" . "\n" . "Cachet et signature", 0, 'L', FALSE, 0);

                    $pdf->SetAutoPageBreak(1);
                    $y = 280;
                    $pdf->SetXY($x, $y);
                    $pdf->SetTextColor(130, 130, 130);
                    $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, $this->emetteur->address . " - " . $this->emetteur->zip . " " . $this->emetteur->town . " - tel: " . $this->emetteur->phone . "\n" . " " . getFormeJuridiqueLabel($this->emetteur->forme_juridique_code) . (($this->emetteur->capital > 0) ? " au Capital de " . price($this->emetteur->capital) . " Euros" : "") . " - NÂ° SIRET: " . $this->emetteur->idprof2 . " - APE: " . $this->emetteur->idprof3, 0, 'C');

                    if (method_exists($pdf, 'AliasNbPages'))
                        $pdf->AliasNbPages();
                    $pdf->Close();
                    $pdf->Output($file, 'f');
                }

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

                $file = $dir . "/Proces_verbal.pdf";

                if (file_exists($dir)) {
                    $pdf = "";
                    $nblignes = sizeof($contrat->lignes);
                    // Protection et encryption du pdf
                    $pdf = pdf_getInstance($this->format);
                    $this->pdf = $pdf;
                    if (class_exists('TCPDF')) {
                        if (get_class($pdf) == "FPDI") {
                            if($valfinance->banque!="Grenke")
                            $logo_B="finapro";
                        else
                            $logo_B="lease";
                        $pdf = getNewPdf($this->format,$logo_B);
                            $this->pdf = $pdf;
                        }
                        $pdf->setPrintHeader(true);
                        $pdf->setPrintFooter(true);
                    }
                }
                $pdf->annulenb_page = true;
                $pdf->Open();
                $pdf->SetAutoPageBreak(1, 55);
                $pdf->SetDrawColor(128, 128, 128);
                $pdf->SetTitle($contrat->ref);
                $pdf->SetSubject($outputlangs->transnoentities("Contract"));
                $pdf->SetCreator("BIMP-ERP " . DOL_VERSION);
                $pdf->SetAuthor($user->getFullName($langs));
                $pdf->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);


                $pdf->AddPage();
                $this->marge_gauche = 20;
                $this->marge_droite = 25;
                $x = $this->marge_gauche;
                $y = $this->marge_haute;
                //titre
                $pdf->SetXY($x, $y);
                $pdf->setFont('', 'B', 18);
                $pdf->MultiCell($this->page_largeur - $this->marge_gauche - $this->marge_droite, 6, "PROCES VERBAL DE RECEPTION ET MISE EN SERVICE DE MATERIEL", 1, 'C');

                //adresse du locataire
                $pdf->setFont('', '', 9);
                $y+=28;
                $pdf->SetXY($x, $y);
                $w = ($this->page_largeur - $this->marge_gauche - $this->marge_droite) / 2;
                $pdf->MultiCell($w, 6, "ADRESSE DU LOCATAIRE:" . "\n" . $contrat->societe->nom . "\n" . $contrat->societe->address . "\n" . $contrat->societe->zip . " " . $contrat->societe->town . "\n", 0, 'L', FALSE, 0);
                $x+=$w;
                $pdf->SetX($x);
                $pdf->MultiCell($w, 6, "ADRESSE DU VENDEUR:\n\n\n\n", 0, 'L');
                $x-=$w;
                $y = $pdf->GetY();
                $y+=6;
                $pdf->SetXY($x, $y);
                $w = ($this->page_largeur - $this->marge_gauche - $this->marge_droite);
                $pdf->setFont('', '', 18);
                $pdf->MultiCell($w, 6, "CONTRAT DE LOCATION NÂ°" . $contrat->ref, 0, 'C');
                $pdf->setFont('', '', 9);
                $y+=12;
                $pdf->SetXY($x, $y);

//tableau rÃ©capitulatif/////////////////////////////////////////////////////////
                $W = ($this->page_largeur - $this->marge_droite - $this->marge_gauche) / 12;
                //////////////////entete du tableau/////////////////////////////////////////////
//qte
                $pdf->SetFont(''/* 'Arial' */, '', 9);
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->Cell($W * 1, 6, "QuantitÃ©", 1, null, 'L', true);
//designation
                $X = $this->marge_gauche + $W;
                $pdf->setX($X);
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->Cell($W * 7, 6, "DÃ©signation du matÃ©riels", 1, null, 'L', true);
                $M_N = false;
//marque
                /* $X=$this->marge_gauche+$W*8;
                  $pdf->setX($X);
                  $pdf->setColor('fill', 230, 230, 250);
                  $pdf->Cell($W, 6, "Marque", 1, null, 'L', true);
                 * $M_N=true;
                 */
//num de sÃ©rie
                if ($M_N == true) {
                    $X = $this->marge_gauche + $W * 10;
                } else {
                    $X = $this->marge_gauche + $W * 8;
                }
                $pdf->setX($X);
                $pdf->setColor('fill', 230, 230, 250);
                $pdf->MultiCell($W * 2, 6, "NÂ° de sÃ©rie", 1, 'L', true);

////////////////fin entete du tableau///////////////////////////////////////////
////////////////debut corps tableau/////////////////////////////////////////////
                $X = $this->marge_gauche;
                $color_id = 0;
                foreach ($propal->lines as $obj) {
                    if ($color_id == 0) {
                        $pdf->setColor('fill', 255, 255, 255);
                    } else {
                        $pdf->setColor('fill', 235, 235, 235);
                    }
                    if ($obj->fk_product) {
                        $prod = new product($this->db);
                        $prod->fetch($obj->fk_product);

                        $X = $this->marge_gauche;
                        $pdf->SetX($X); //repÃ¨re
                        $pdf->Cell($W, 6, $obj->qty, 1, NULL, 'L', true);
                        $X = $this->marge_gauche + $W;
                        $pdf->setX($X);
                        $pdf->Cell($W * 7, 6, dol_trunc($prod->ref . " - " . $prod->libelle . " - " . $obj->desc, 49), 1, NULL, 'L', TRUE);
                        $X = $this->marge_gauche + $W * 8;
                        $pdf->setX($X);
                        if ($M_N == true) {
                            $pdf->Cell($W, 6, "marque", 1, null, 'L', true);
                            $X = $this->marge_gauche + $W * 10;
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        } else {
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        }
                        $color_id = ($color_id + 1) % 2;
                    } else {

                        $X = $this->marge_gauche;
                        $pdf->SetX($X); //repÃ¨re
                        $pdf->Cell($W, 6, $obj->qty, 1, NULL, 'L', true);
                        $X = $this->marge_gauche + $W;
                        $pdf->setX($X);
                        $pdf->Cell($W * 7, 6, dol_trunc($obj->desc, 49), 1, NULL, 'L', TRUE);
                        $X = $this->marge_gauche + $W * 8;
                        $pdf->setX($X);
                        if ($M_N == true) {
                            $pdf->Cell($W, 6, "", 1, null, 'L', true);
                            $X = $this->marge_gauche + $W * 10;
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        } else {
                            $pdf->MultiCell($W * 2, 6, "", 1, 'L', true);
                        }
                        $color_id = ($color_id + 1) % 2;
                    }
                }
//fin corps tableau/////////////////////////////////////////////////////////////
//fin tableau///////////////////////////////////////////////////////////////////
                $x = $this->marge_gauche;
                $y = $pdf->GetY();
                $y+=9;
                $pdf->SetXY($x, $y);
                $pdf->MultiCell($w, 6, "Le locataire a choisi librement et sous sa responsabilitÃ© les Ã©quipements, objets du prÃ©sent contrat, en sâassurant auprÃ¨s de ses fournisseurs de leur compatibilitÃ© y compris dans le cas oÃ¹ ils sont incorporÃ©s dans un systÃ¨me informatique prÃ©existant.", 0, 'L');
                $pdf->SetX($x);
                $pdf->MultiCell($w, 6, "Le vendeur dÃ©clare que le matÃ©riel, ci-dessus dÃ©signÃ©, a bien Ã©tÃ© mis en service selon les normes du constructeur, et le locataire dÃ©clare avoir, ce jour, rÃ©ceptionnÃ© ce matÃ©riel sans aucune rÃ©serve, en bon Ã©tat de marche, sans vice ni dÃ©faut apparent et conforme Ã  la commande passÃ©e au fournisseur. En consÃ©quence, le locataire dÃ©clare accepter ledit matÃ©riel sans restriction, ni rÃ©serve, compte tenu du mandat qui lui a Ã©tÃ© fait par " . "FINAPRO", 0, 'L');
                $pdf->SetX($x);
                $pdf->MultiCell($w, 6, "FAIT EN DOUBLE EXEMPLAIRE, UN POUR CHACUNE DES PARTIES", 0, 'L');
                $pdf->SetX($x);
                $pdf->MultiCell($w, 6, "Fait Ã  Lyon le " . dol_print_date($contrat->date_contrat), 0, 'L');
                $W = $w / 2;
                $y = $pdf->GetY();
                $y+=6;
                $pdf->SetXY($x, $y);
                $pdf->setfont('', 'B', 8);
                if($valfinance->banque== "Grenke" || $valfinance->banque=="BNP")
                $pdf->MultiCell($W, 6, "Pour le locataire" . "\n" . "Signature et cachet (lu et approuvÃ©)" . "\n" . "QualitÃ©" . "\n" . "NOM", 0, 'L', false, 0);
                $x+=$W;
                $pdf->SetXY($x, $y);
                if($valfinance->banque== "Grenke" || $valfinance->banque=="BNP")
                $pdf->MultiCell($W, 6, "Pour le Vendeur" . "\n" . "Signature et cachet", 0, 'L');

                if (method_exists($pdf, 'AliasNbPages'))
                    $pdf->AliasNbPages();
                $pdf->Close();
                $pdf->Output($file, 'f');

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
                //$langs->setPhpLang();    // On restaure langue session


                return 1;   // Pas d'erreur
            } else {
                $this->error = $langs->trans("ErrorCanNotCreateDir", $dir);
                //$langs->setPhpLang();    // On restaure langue session
                return 0;
            }
        } else {
            $this->error = $langs->trans("ErrorConstantNotDefined", "CONTRACT_OUTPUTDIR");
            //$langs->setPhpLang();    // On restaure langue session
            return 0;
        }

        $this->error = $langs->trans("ErrorUnknown");
        //$langs->setPhpLang();    // On restaure langue session
        return 0;   // Erreur par defaut
    }

    function ConvNumberLetter($Nombre, $Devise, $Langue) {
        $dblEnt = '';
        $byDec = '';
        $bNegatif = '';
        $strDev = '';
        $strCentimes = '';

        if ($Nombre < 0) {
            $bNegatif = true;
            $Nombre = abs($Nombre);
        }
        $dblEnt = intval($Nombre);
        $byDec = round(($Nombre - $dblEnt) * 100);
        if ($byDec == 0) {
            if ($dblEnt > 999999999999999) {
                return "#TropGrand";
            }
        } else {
            if ($dblEnt > 9999999999999.99) {
                return "#TropGrand";
            }
        }
        switch ($Devise) {
            case 0 :
                if ($byDec > 0)
                    $strDev = " virgule";
                break;
            case 1 :
                $strDev = " Euro";
                if ($byDec > 0)
                    $strCentimes = $strCentimes . " Cents";
                break;
            case 2 :
                $strDev = " Dollar";
                if ($byDec > 0)
                    $strCentimes = $strCentimes . " Cent";
                break;
        }
        if (($dblEnt > 1) && ($Devise != 0))
            $strDev = $strDev . "s";

        $NumberLetter = $this->ConvNumEnt(floatval($dblEnt), $Langue) . $strDev . " " . $this->ConvNumDizaine($byDec, $Langue) . $strCentimes;
        return $NumberLetter;
    }

    private function ConvNumEnt($Nombre, $Langue) {
        $byNum = $iTmp = $dblReste = '';
        $StrTmp = '';
        $NumEnt = '';
        $iTmp = $Nombre - (intval($Nombre / 1000) * 1000);
        $NumEnt = $this->ConvNumCent(intval($iTmp), $Langue);
        $dblReste = intval($Nombre / 1000);
        $iTmp = $dblReste - (intval($dblReste / 1000) * 1000);
        $StrTmp = $this->ConvNumCent(intval($iTmp), $Langue);
        switch ($iTmp) {
            case 0 :
                break;
            case 1 :
                $StrTmp = "mille ";
                break;
            default :
                $StrTmp = $StrTmp . " mille ";
        }
        $NumEnt = $StrTmp . $NumEnt;
        $dblReste = intval($dblReste / 1000);
        $iTmp = $dblReste - (intval($dblReste / 1000) * 1000);
        $StrTmp = $this->ConvNumCent(intval($iTmp), $Langue);
        switch ($iTmp) {
            case 0 :
                break;
            case 1 :
                $StrTmp = $StrTmp . " million ";
                break;
            default :
                $StrTmp = $StrTmp . " millions ";
        }
        $NumEnt = $StrTmp . $NumEnt;
        $dblReste = intval($dblReste / 1000);
        $iTmp = $dblReste - (intval($dblReste / 1000) * 1000);
        $StrTmp = $this->ConvNumCent(intval($iTmp), $Langue);
        switch ($iTmp) {
            case 0 :
                break;
            case 1 :
                $StrTmp = $StrTmp . " milliard ";
                break;
            default :
                $StrTmp = $StrTmp . " milliards ";
        }
        $NumEnt = $StrTmp . $NumEnt;
        $dblReste = intval($dblReste / 1000);
        $iTmp = $dblReste - (intval($dblReste / 1000) * 1000);
        $StrTmp = $this->ConvNumCent(intval($iTmp), $Langue);
        switch ($iTmp) {
            case 0 :
                break;
            case 1 :
                $StrTmp = $StrTmp . " billion ";
                break;
            default :
                $StrTmp = $StrTmp . " billions ";
        }
        $NumEnt = $StrTmp . $NumEnt;
        return $NumEnt;
    }

    private function ConvNumDizaine($Nombre, $Langue) {
        $TabUnit = $TabDiz = '';
        $byUnit = $byDiz = '';
        $strLiaison = '';

        $TabUnit = array("", "un", "deux", "trois", "quatre", "cinq", "six", "sept",
            "huit", "neuf", "dix", "onze", "douze", "treize", "quatorze", "quinze",
            "seize", "dix-sept", "dix-huit", "dix-neuf");
        $TabDiz = array("", "", "vingt", "trente", "quarante", "cinquante",
            "soixante", "soixante", "quatre-vingt", "quatre-vingt");
        if ($Langue == 1) {
            $TabDiz[7] = "septante";
            $TabDiz[9] = "nonante";
        } else if ($Langue == 2) {
            $TabDiz[7] = "septante";
            $TabDiz[8] = "huitante";
            $TabDiz[9] = "nonante";
        }
        $byDiz = intval($Nombre / 10);
        $byUnit = $Nombre - ($byDiz * 10);
        $strLiaison = "-";
        if ($byUnit == 1)
            $strLiaison = " et ";
        switch ($byDiz) {
            case 0 :
                $strLiaison = "";
                break;
            case 1 :
                $byUnit = $byUnit + 10;
                $strLiaison = "";
                break;
            case 7 :
                if ($Langue == 0)
                    $byUnit = $byUnit + 10;
                break;
            case 8 :
                if ($Langue != 2)
                    $strLiaison = "-";
                break;
            case 9 :
                if ($Langue == 0) {
                    $byUnit = $byUnit + 10;
                    $strLiaison = "-";
                }
                break;
        }
        $NumDizaine = $TabDiz[$byDiz];
        if ($byDiz == 8 && $Langue != 2 && $byUnit == 0)
            $NumDizaine = $NumDizaine . "s";
        if ($TabUnit[$byUnit] != "") {
            $NumDizaine = $NumDizaine . $strLiaison . $TabUnit[$byUnit];
        } else {
            $NumDizaine = $NumDizaine;
        }
        return $NumDizaine;
    }

    private function ConvNumCent($Nombre, $Langue) {
        $TabUnit = '';
        $byCent = $byReste = '';
        $strReste = '';
        $NumCent = '';
        $TabUnit = array("", "un", "deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf", "dix");

        $byCent = intval($Nombre / 100);
        $byReste = $Nombre - ($byCent * 100);
        $strReste = $this->ConvNumDizaine($byReste, $Langue);
        switch ($byCent) {
            case 0 :
                $NumCent = $strReste;
                break;
            case 1 :
                if ($byReste == 0)
                    $NumCent = "cent";
                else
                    $NumCent = "cent " . $strReste;
                break;
            default :
                if ($byReste == 0)
                    $NumCent = $TabUnit[$byCent] . " cents";
                else
                    $NumCent = $TabUnit[$byCent] . " cent " . $strReste;
        }
        return $NumCent;
    }

}

//    function header(& $pdf, $object, $showadress = 1, $outputlangs, $currentPage = 0) {
//        global $conf, $langs;
//        $logo = false;
//        if (is_file($conf->mycompany->dir_output . '/logos' . '/' . $this->emetteur->logo . "noalpha.png")) {
//            $logo = $conf->mycompany->dir_output . '/logos' . '/' . $this->emetteur->logo . "noalpha.png";
//        } else {
//            $logo = $conf->mycompany->dir_output . '/logos' . '/' . $this->emetteur->logo;
//        }
//        if (is_readable($logo)) {
//            $pdf->Image($logo, 75, 13, 0, 24);
//        }
//    }

/*
 *   \brief      Affiche le pied de page
 *   \param      pdf     objet PDF
 */

function _pagefoot(&$pdf, $outputlangs) {
    
}

function hex2RGB($hexStr, $returnAsString = false, $seperator = ',') {
    $hexStr = preg_replace("/[^0-9A-Fa-f]/", '', $hexStr); // Gets a proper hex string
    $rgbArray = array();
    if (strlen($hexStr) == 6) { //If a proper hex code, convert using bitwise operation. No overhead... faster
        $colorVal = hexdec($hexStr);
        $rgbArray['red'] = 0xFF & ($colorVal >> 0x10);
        $rgbArray['green'] = 0xFF & ($colorVal >> 0x8);
        $rgbArray['blue'] = 0xFF & $colorVal;
    } elseif (strlen($hexStr) == 3) { //if shorthand notation, need some string manipulations
        $rgbArray['red'] = hexdec(str_repeat(substr($hexStr, 0, 1), 2));
        $rgbArray['green'] = hexdec(str_repeat(substr($hexStr, 1, 1), 2));
        $rgbArray['blue'] = hexdec(str_repeat(substr($hexStr, 2, 1), 2));
    } else {
        return false; //Invalid hex color code
    }
    return $returnAsString ? implode($seperator, $rgbArray) : $rgbArray; // returns the rgb string or the associative array
}

function int2str($a) {
    $joakim = explode('.', $a);
    if (isset($joakim[1]) && $joakim[1] != '') {
        return int2str($joakim[0]) . ' virgule ' . int2str($joakim[1]);
    }
    if ($a < 0)
        return 'moins ' . int2str(-$a);
    if ($a < 17) {
        switch ($a) {
            case 0: return 'zero';
            case 1: return 'un';
            case 2: return 'deux';
            case 3: return 'trois';
            case 4: return 'quatre';
            case 5: return 'cinq';
            case 6: return 'six';
            case 7: return 'sept';
            case 8: return 'huit';
            case 9: return 'neuf';
            case 10: return 'dix';
            case 11: return 'onze';
            case 12: return 'douze';
            case 13: return 'treize';
            case 14: return 'quatorze';
            case 15: return 'quinze';
            case 16: return 'seize';
        }
    } else if ($a < 20) {
        return 'dix-' . int2str($a - 10);
    } else if ($a < 100) {
        if ($a % 10 == 0) {
            switch ($a) {
                case 20: return 'vingt';
                case 30: return 'trente';
                case 40: return 'quarante';
                case 50: return 'cinquante';
                case 60: return 'soixante';
                case 70: return 'soixante-dix';
                case 80: return 'quatre-vingt';
                case 90: return 'quatre-vingt-dix';
            }
        } elseif (substr($a, -1) == 1) {
            if (((int) ($a / 10) * 10) < 70) {
                return int2str((int) ($a / 10) * 10) . '-et-un';
            } elseif ($a == 71) {
                return 'soixante-et-onze';
            } elseif ($a == 81) {
                return 'quatre-vingt-un';
            } elseif ($a == 91) {
                return 'quatre-vingt-onze';
            }
        } elseif ($a < 70) {
            return int2str($a - $a % 10) . '-' . int2str($a % 10);
        } elseif ($a < 80) {
            return int2str(60) . '-' . int2str($a % 20);
        } else {
            return int2str(80) . '-' . int2str($a % 20);
        }
    } else if ($a == 100) {
        return 'cent';
    } else if ($a < 200) {
        return int2str(100) . ' ' . int2str($a % 100);
    } else if ($a < 1000) {
        if ($a % 100 == 0)
            return int2str((int) ($a / 100)) . ' ' . int2str(100);
        if ($a % 100 != 0)
            return int2str((int) ($a / 100)) . ' ' . int2str(100) . ' ' . int2str($a % 100);
    } else if ($a == 1000) {
        return 'mille';
    } else if ($a < 2000) {
        return int2str(1000) . ' ' . int2str($a % 1000) . ' ';
    } else if ($a < 1000000) {
        return int2str((int) ($a / 1000)) . ' ' . int2str(1000) . ' ' . int2str($a % 1000);
    }
}

function getNewPdf($format,$logo_B) {
    if (!class_exists("FPDI222")) {
        
        class FPDI222 extends FPDI {
            
            public $logoB;
            
            function setHeader() {
                global $conf, $langs, $mysoc;
                $logo = false;
                if (is_file(DOL_DOCUMENT_ROOT.'/synopsisfinanc/img/'. $this->logoB.".png")) {
                    $logo = DOL_DOCUMENT_ROOT.'/synopsisfinanc/img/'.$this->logoB . ".png";
                } else {
                    $logo = $conf->mycompany->dir_output . '/logos' . '/' . $mysoc->logo;
                }
                if (is_readable($logo)) {
                    $this->Image($logo, 0, 5, 0, 25,'','','',false,300,'C');
                }
            }

            function setFooter() {
                $this->SetAutoPageBreak(1, 0);
                $this->SetXY(190, 289);
                if (!isset($this->annulenb_page) || !$this->annulenb_page)
                    $this->MultiCell(15, 3, '' . $this->PageNo() . '/{:ptp:}', 0, 'R', 0);
                $this->SetAutoPageBreak(1, $this->margin_bottom);
            }

        }

    }
    $return =new FPDI222('P', 'mm', $format);
    $return->logoB=$logo_B;
    return $return;
}
