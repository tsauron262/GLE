<?php
/* Copyright (C) 2005-2008 Laurent Destailleur  <eldy@users.sourceforge.net>
 * Copyright (C) 2005-2008 Regis Houssin        <regis.houssin@capnetworks.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.*//*
  * GLE by Synopsis et DRSI
  *
  * Author: Tommy SAURON <tommy@drsi.fr>
  * Licence : Artistic Licence v2.0
  *
  * Version 1.0
  * Create on : 4-1-2009
  *
  * Infos on http://www.synopsis-erp.com
  *
  *//*
 *
 * $Id: interface_modPhenix_EcmTriggers.class.php,v 1.1 2008/01/06 20:33:49 hregis Exp $
 */

/**
        \file       htdocs/includes/triggers/interface_modPhenix_EcmTriggers.class.php
        \ingroup    phenix
        \brief      Fichier de gestion des triggers phenix
*/

//include_once(DOL_DOCUMENT_ROOT.'/phenix/phenix.class.php');
require_once(DOL_DOCUMENT_ROOT."/ecm/ecmdirectory.class.php");

/**
        \class      InterfaceEcmTriggers
        \brief      Classe des fonctions triggers des actions phenix
*/

class InterfaceEcmTriggers
{
    var $db;
    var $error;

    var $date;
    var $duree;
    var $texte;
    var $desc;

    /**
     *   \brief      Constructeur.
     *   \param      DB      Handler d'acces base
     */
    function InterfaceEcmTriggers($DB)
    {
        $this->db = $DB ;

        $this->name = "EcmTriggers";
        $this->family = "OldGleModule";
        $this->description = "Les triggers de ce composant permettent d'inserer un evenement dans le calendrier Zimbra pour chaque  evenement Dolibarr.";
        $this->version = '0.1';                        // 'experimental' or 'dolibarr' or version
    }

    /**
     *   \brief      Renvoi nom du lot de triggers
     *   \return     string      Nom du lot de triggers
     */
    function getName()
    {
        return $this->name;
    }

    /**
     *   \brief      Renvoi descriptif du lot de triggers
     *   \return     string      Descriptif du lot de triggers
     */
    function getDesc()
    {
        return $this->description;
    }

    /**
     *   \brief      Renvoi version du lot de triggers
     *   \return     string      Version du lot de triggers
     */
    function getVersion()
    {
        global $langs;
        $langs->load("admin");

        if ($this->version == 'experimental') return $langs->trans("Experimental");
        elseif ($this->version == 'dolibarr') return GLE_VERSION;
        elseif ($this->version) return $this->version;
        else return $langs->trans("Unknown");
    }

    /**
     *      \brief      Fonction appelee lors du declenchement d'un evenement Dolibarr.
     *                  D'autres fonctions run_trigger peuvent etre presentes dans includes/triggers
     *      \param      action      Code de l'evenement
     *      \param      object      Objet concerne
     *      \param      user        Objet user
     *      \param      lang        Objet lang
     *      \param      conf        Objet conf
     *      \return     int         <0 si ko, 0 si aucune action faite, >0 si ok
     */
    function run_trigger($action,$object,$user,$langs,$conf)
    {

        // Mettre ici le code a executer en reaction de l'action
        // Les donnees de l'action sont stockees dans $object

        if (! $conf->ecm->enabled) return 0;     // Module non actif
        //inactif pour le moment :
//        return 0;
//        if (! $object->use_phenix) return 0;        // Option syncro phenix non active

        $db=$this->db;
        $ecm = new EcmDirectory($db);
        switch ($action)
        {
            case 'USER_CHANGERIGHT':
            break;
            //nouveau trigger
            case 'ECM_GENFACTURE':
                $ecm->create_autogenerated('facture',$object,$user,$conf);
            break;
            case 'ECM_GENLIVRAISON':
                $ecm->create_autogenerated('livraison',$object,$user,$conf);
            break;
            case 'ECM_GENPROPALE':
            case 'ECM_GENPROPAL':
                $ecm->create_autogenerated('propal',$object,$user,$conf);
            break;
            case 'ECM_GENACTIONCOMRAPPORT':
                $ecm->create_autogenerated('actioncomm',$object,$user,$conf);
            break;
            case 'ECM_GENCOMMANDE':
                $ecm->create_autogenerated('commande',$object,$user,$conf);
            break;
            case 'ECM_GENCONTRAT':
                $ecm->create_autogenerated('contrat',$object,$user,$conf);
            break;
            case 'ECM_GENDONS':
                $ecm->create_autogenerated('don',$object,$user,$conf);
            break;
            case 'ECM_GENREMISECHEQUE':
                $ecm->create_autogenerated('bordereau_cheque',$object,$user,$conf);
            break;
            case 'ECM_GENEXPEDITION':
                $ecm->create_autogenerated('expedition',$object,$user,$conf);
            break;
            case 'ECM_GENFICHEINTER':
            case 'ECM_GENFICHINTER':
                $ecm->create_autogenerated('fichinter',$object,$user,$conf);
            break;
            case 'ECM_GENDEMANDEINTERV':
                $ecm->create_autogenerated('demandeInterv',$object,$user,$conf);
            break;
            case 'ECM_GENLIVRAISON':
                $ecm->create_autogenerated('livraison',$object,$user,$conf);
            break;
            case 'ECM_GENCOMMANDE_FOURN':
            case 'ECM_GEN_COMMFOURN':
                $ecm->create_autogenerated('commande_fournisseur',$object,$user,$conf);
            break;
            case 'ECM_UL_PROPAL':
            case 'ECM_UL_PROPALE':
                $ecm->create_assoc("propal",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_LOGO':
                $ecm->create_assoc("logo",$object, $this->texte,$user,$conf); //????
            break;
            case 'ECM_UL_ACTION':
                $ecm->create_assoc("actioncomm",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_COMMANDE':
                $ecm->create_assoc("commande",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_FACTURE':
                $ecm->create_assoc("facture",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_BONPRELEV':
                $ecm->create_assoc("prelevement_bons",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_FACTURE':
                $ecm->create_assoc("facture",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_CONTRAT':
                $ecm->create_assoc("contrat",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_FACTUREFOURN':
                $ecm->create_assoc("facture_fourn",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_MAILLING':
                $ecm->create_assoc("newsletter",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_PRODUCT':
                $ecm->create_assoc("produit",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_PRODUCT_PHOTO':
                $ecm->create_assoc("produit",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_SOCIETE':
                $ecm->create_assoc("societe",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_USER_PHOTO':
                $ecm->create_assoc("user",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_FICHEINTER':
            case 'ECM_UL_FICHINTER':
                $ecm->create_assoc("ficheinter",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_DEMANDEINTERV':
                $ecm->create_assoc("demandeinterv",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_DEL_DEMANDEINTERV':
                //$ecm->create_assoc("demandeinterv",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_DEL_ACTION':
                //$ecm->create_assoc("demandeinterv",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_DEL_PROPAL':
                //$ecm->create_assoc("demandeinterv",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_UL_DEL_COMMANDE':
            break;
            case 'ECM_UL_DEL_FACTURE':
            break;
            case 'ECM_DEL_UL_CONTRAT':
            break;
            case 'ECM_UL_DEL_FICHINTER':
            break;
            case 'ECM_UL_DEL_COMMFOURN':
            break;
            case 'ECM_UL_DEL_FACTUREFOURN':
            break;
            case 'ECM_UL_DEL_PRODUCT':
            break;
            case 'ECM_UL_DEL_PRODUCT_PHOTO':
            break;
            case 'ECM_UL_DEL_SOCIETE':
            break;


            case 'ECM_DEL_FACTURE':
            break;
            case 'ECM_UL_PROJET':
                $ecm->create_assoc("projet",$object, $this->texte,$user,$conf);
            break;
            case 'ECM_DEL_PROJET':
                //$ecm->create_assoc("projet",$object, $this->texte,$user,$conf);
            break;

        }
        return 0;
    }
}
?>
