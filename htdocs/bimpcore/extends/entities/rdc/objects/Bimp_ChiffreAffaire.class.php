<?php

class Bimp_ChiffreAffaire_ExtEntity extends BimpObject
{
	public static $parentObjectArray = array(
		0 => 'Bimp_Societe',
		1 => 'Bimp_Concurrence',
	);
	public static $parentIdProperty = array(
		0 => 'fk_soc',
		1 => 'id',
	);
	public static $objLabelArray = array(
		0 => 'CA société',
		1 => 'CA concurrence',
	);
	public static $periodsRdcArray = array(
		0 => 'Annee',
		1 => 'Semestre',
		2 => 'Trimestre',
		3 => 'Mois',
		4 => 'Semaine',
	);

	// getters
	public function getParentObject($type)
	{
		return self::$parentObjectArray[$type];
	}

	public function getParent_IdProperty()
	{
		$type = BimpTools::getPostFieldValue('type_obj', $this->getData('type_obj'), 'int');
		return self::$parentIdProperty[$type];
	}

	public function getTypesObjetsRdc()
	{
		return self::$objLabelArray;
	}

	public function getObjectParentName()
	{
		$type = BimpTools::getPostFieldValue('type_obj', $this->getData('type_obj'), 'int');
		return static::$parentObjectArray[$type];
	}

	public function getDefaultIdParenrt()
	{
		$type = BimpTools::getPostFieldValue('type_obj', $this->getData('type_obj'), 'int');
		if ($type == 0 && BimpTools::getPostFieldValue('action') == 'loadObjectForm') {
			return BimpTools::getPostFieldValue('id', 0, 'int');
		}
	}

	public function getPeriodsRdc()
	{
		return self::$periodsRdcArray;
	}

	public function getParamsPeriode()
	{
		if ($this->getData('fk_period') == 0) {
			return 'YYYY';
		} elseif ($this->getData('fk_period') < 4) {
			return 'MM YYYY';
		}
	}

	public function validateValue($field, $value, $forbidden_chars = array())
	{
		$errors = array();
		if ($field == 'debut_period') {
			$date = strtotime($value);
			$day = date('d', $date);
			$jSemaine = date('w', $date);
			$month = date('m', $date);


			if ($this->getData('fk_period') < 4) {
				if ($day != 1) {
					$errors[] = 'Le jour doit être en debut de mois (01)';
				}
			} else {
				if ($jSemaine != 1) {
					$errors[] = 'Le jour doit être un lundi ' . $jSemaine;
				}
			}
			if ($this->getData('fk_period') == 0) {
				if ($month != 1) {
					$errors[] = 'Le mois doit être en debut d\'année (01)';
				}
			}
			if ($this->getData('fk_period') == 1) {
				if (fmod($month, 6) != 1) {
					$errors[] = $month . ' n\'est pas le début d\'un semestre';
				}
			}
			if ($this->getData('fk_period') == 2) {
				if (fmod($month, 3) != 1) {
					$errors[] = $month . ' n\'est pas le début d\'un trimestre';
				}
			}
		}
		if (count($errors)) {
			return $errors;
		}

		return parent::validateValue($field, $value, $forbidden_chars); // TODO: Change the autogenerated stub
	}


	public function getCategCa(){
		$result = array();
		$categories = BimpDict::getValuesArray('ca_categories', true, false);
		$id = $this->parent->id;
		if($id == 0){
			$id = BimpTools::getPostFieldValue('id', 0, 'int');
		}
		$sql = $this->db->db->query('SELECT DISTINCT(fk_category) FROM ' . MAIN_DB_PREFIX . 'ca_rdc WHERE id_obj = '.$id);
		while($ln = $this->db->db->fetch_object($sql)){
			$result[$ln->fk_category] = $categories[$ln->fk_category]['label'];
		}
		return $result;
	}

	//graph
	public function getCategForGrpah($type = 1, $label = '')
	{
		$fields = array();
		$categories = BimpDict::getValuesArray('ca_categories', true, false);
		$id = $this->parent->id;
		if($id == 0){
			$id = BimpTools::getPostFieldValue('id', 0, 'int');
		}
		if($id == 0){
			echo '<pre>';print_r($_REQUEST);die;
			$id = BimpTools::getPostFieldValue('id', 0, 'int');
		}
		if($type == 1)
			$field = 'fk_category';
		else
			$field = 'fk_category'.$type;
		$sql = $this->db->db->query('SELECT DISTINCT('.$field.') as categ FROM ' . MAIN_DB_PREFIX . 'ca_rdc WHERE id_obj = '.$id);
		while($ln = $this->db->db->fetch_object($sql)){
			$idC = $ln->categ;
			if ($idC > 0) {
				$fields[$idC] = array(
					"title"   => $categories[$idC]['label'],
					'field'   => 'ca',
					'calc'    => 'SUM',
					'filters' => array($field => $idC)
				);
			}
		}

		return $fields;
	}

//	public function getFiltersForGraph()
//	{
//		$filters = array(
//			'fk_category' => 0,
//			'fk_period'   => 3,
//		);
//		$data = $this->paramsUrlToArray(BimpTools::getPostFieldValue('form'));
//
//		if (isset($data['fk_category'])) {
//			$filters['fk_category'] = $data['fk_category'];
//		}
//		if (isset($data['fk_period'])) {
//			$filters['fk_period'] = $data['fk_period'];
//		}
//
//		return $filters;
//	}

	public function paramsUrlToArray($str)
	{
		$tab = explode('&', $str);
		foreach ($tab as $key => $value) {
			$tab2 = explode('=', $value);
			$tab[$tab2[0]] = $tab2[1];
			unset($tab[$key]);
		}
		return $tab;
	}
}
