<?php


class ammortissement extends BimpObject
{
	function validate()
	{
		$return = parent::validate(); // TODO: Change the autogenerated stub
		if($this->getInitData('id_fact') != $this->getData('id_fact')){
			if($this->getData('id_fact')) {
				$factFourn = BimpCache::getBimpObjectInstance('bimpcommercial', 'Bimp_FactureFourn', $this->getData('id_fact'));
				$this->updateField('date_paiement_reel', $factFourn->getData('datef'));
//				die($factFourn->getData('datef').'mmm');
			}
			else{
				$this->updateField('date_paiement_reel', '');
			}
		}


		return $return;
	}

	public function isActionAllowed($action, &$errors = array())
	{
		if($action == 'createFact'){
			if($this->getData('id_fact') > 0){
				$errors[] = 'Une facture existe déjà pour cet amortissement.';
				return false;
			}
		}
		return parent::isActionAllowed($action, $errors); // TODO: Change the autogenerated stub
	}

	public function getActionsButtons()
	{
		$buttons = array();

		if ($this->isActionAllowed('createFact') && $this->canSetAction('createFact')) {
			$buttons[] = array(
				'label'   => 'Créer facture',
				'icon'    => 'fas_check',
				'onclick' => $this->getJsActionOnclick('createFact', array(), array(
					'form_name' => 'createFact'
				))
			);
		}
		return $buttons;
	}

	public function createFact($date, &$errors, &$warnings, $withLigne = true, $validate = true, $addPaiement = true){
		$parent = $this->getParentInstance();
		$fact = BimpObject::createBimpObject('bimpcommercial', 'Bimp_FactureFourn', array(
			'label'        => 'Rmb ' . $date,
			'datef'        => $date,
			'fk_soc'       => $parent->getData('id_fourn'),
			'ref_supplier' => 'Rmb ' . $date,
			'fk_account'	=>$parent->getData('banque'),
			'fk_mode_reglement'=> $parent->getData('fk_paiement')
		), false, $errors, $warnings);
		$this->updateField('id_fact', $fact->getData('rowid'));
		if (!count($errors)){
			if($this->getData('MONTANT_INTERETS') > 0) {
				$fac_line = BimpObject::getInstance('bimpcommercial', 'Bimp_FactureFournLine');
				$errors = BimpTools::merge_array($errors, $fac_line->validateArray(array(
					'id_obj' => (int) $fact->id
				)));
				$fac_line->tva_tx = 0;
				$fac_line->qty = 1;
				$fac_line->id_product = $parent->getData('id_interet');
				$fac_line->pu_ht = $this->getData('MONTANT_INTERETS');
				$fac_line->pa_ht = $this->getData('MONTANT_INTERETS');
				if (!count($errors)) {
					$errors = $fac_line->create($warnings);
				}
			}
			if($this->getData('MONTANT_ASSURANCE') > 0) {
				$fac_line = BimpObject::getInstance('bimpcommercial', 'Bimp_FactureFournLine');
				$errors = BimpTools::merge_array($errors, $fac_line->validateArray(array(
					'id_obj' => (int) $fact->id
				)));
				$fac_line->tva_tx = 0;
				$fac_line->qty = 1;
				$fac_line->id_product = $parent->getData('id_assurance');
				$fac_line->pu_ht = $this->getData('MONTANT_ASSURANCE');
				$fac_line->pa_ht = $this->getData('MONTANT_ASSURANCE');
				if (!count($errors)) {
					$errors = $fac_line->create($warnings);
				}
			}
			if($this->getData('MONTANT_ACCESSOIRES') > 0) {
				$fac_line = BimpObject::getInstance('bimpcommercial', 'Bimp_FactureFournLine');
				$errors = BimpTools::merge_array($errors, $fac_line->validateArray(array(
					'id_obj' => (int) $fact->id
				)));
				$fac_line->tva_tx = 0;
				$fac_line->qty = 1;
				$fac_line->id_product = $parent->getData('id_accessoire');
				$fac_line->pu_ht = $this->getData('MONTANT_ACCESSOIRES');
				$fac_line->pa_ht = $this->getData('MONTANT_ACCESSOIRES');
				if (!count($errors)) {
					$errors = $fac_line->create($warnings);
				}
			}
			if($this->getData('CAPITAL_AMORTI') > 0) {
				$fac_line = BimpObject::getInstance('bimpcommercial', 'Bimp_FactureFournLine');
				$errors = BimpTools::merge_array($errors, $fac_line->validateArray(array(
					'id_obj' => (int) $fact->id
				)));
				$fac_line->tva_tx = 0;
				$fac_line->qty = 1;
				$fac_line->id_product = $parent->getData('id_capital');
				$fac_line->pu_ht = $this->getData('CAPITAL_AMORTI');
				$fac_line->pa_ht = $this->getData('CAPITAL_AMORTI');
				if (!count($errors)) {
					$errors = $fac_line->create($warnings);
				}
			}
		}
		$fact->fetch($fact->getData('rowid'), false, false, true);
		if($fact->getData('total_ht') != $this->getData('MONTANT_ECHEANCE')){
			$errors[] = 'La facture ne peut pas être créée car le montant total ('.$fact->getData('total_ht').') est diférent de l\'écheance ('.$this->getData('MONTANT_ECHEANCE').').';
		}
		if(!count($errors)){
			$return = $fact->actionValidate(array(), $success);
			$errors = BimpTools::merge_array($return['errors'], $errors);
			$warnings = BimpTools::merge_array($return['warnings'], $warnings);
		}

		if(!count($errors)){
			$fact->quickPaiement($errors, $warnings);

			$this->updateField('date_paiement_reel', $date);
		}
	}

	public function actionCreateFact($data, &$success)
	{
		$errors = $warnings = array();
		$date = BimpTools::getPostFieldValue('date');
		$this->createFact($date, $errors, $warnings);


		return  array('errors' => $errors, 'warnings' => $warnings);
	}

	public function getEmpruntGraphData(){
		$fields = array();
		$emprunts = BimpCache::getBimpObjectObjects('bimpcoop', 'emprunt');
		foreach($emprunts as $emprunt){
			$fourn = $emprunt->getChildObject('fournisseur');
			$fields['emprunt_'.$emprunt->getData('id')] = array(
				'title' => $fourn->getData('nom'),
//			'title'=> 'emprunt_'.$emprunt->getData('id'),
				'type' => 'line',
				'field' => 'CAPITAL_RESTANT_DU',
				'calc'	=> 'MAX',
				'filters' => array(
					'id_emprunt' => $emprunt->getData('id')
				)
			);
		}
//		echo '<pre>';print_r($fields);die;
		return $fields;
	}
}
