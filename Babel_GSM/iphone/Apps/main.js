/*
 This file was generated by Dashcode.
 You may edit this file to customize your widget or web page
 according to the license.txt file included in the project.
 */

var listController = {
    // This object acts as a controller for the list UI.
    // It implements the dataSource methods for the list.

    numberOfRows: function() {
        // The List calls this dataSource method to find out how many rows should be in the list.
        return parks.length;
    },

    prepareRow: function(rowElement, rowIndex, templateElements) {
        // The List calls this dataSource method for every row.  templateElements contains references to all elements inside the template that have an id. We use it to fill in the text of the rowTitle element.
        if (templateElements.rowTitle) {
            templateElements.rowTitle.innerText = parks[rowIndex].name;
        }

        // We also assign an onclick handler that will cause the browser to go to the detail page.
        var self = this;
        var handler = function() {
            var park = parks[rowIndex];
            detailController.setPark(park);
            var browser = document.getElementById('browser').object;
            // The Browser's goForward method is used to make the browser push down to a new level.  Going back to previous levels is handled automatically.
            if (park.name == 'Clients')
                browser.goForward(document.getElementById('menuClient'), park.name,test);
            else if (park.name="Prospects")
                browser.goForward(document.getElementById('menuProspect'), park.name);
            else if (park.name="Contacts")
                browser.goForward(document.getElementById('menuContact'), park.name);

        };
        rowElement.onclick = handler;
    }
};
var test=function(){
    alert('test');
}
var detailController = {
    // This object acts as a controller for the detail UI.

    setPark: function(park) {
        this._park = park;
        this._representedObject = park.name;

        // When the park is set, this controller also updates the DOM for the detail page appropriately.  As you customize the design for the detail page, you will want to extend this code to make sure that the correct information is populated into the detail UI.
        var detailTitle = document.getElementById('detailTitle');
        detailTitle.innerHTML = this._park.name;
        var detailLocation = document.getElementById('detailLocation');
        detailLocation.innerHTML = this._park.location;
        var detailDescription = document.getElementById('detailDescription');
        detailDescription.innerHTML = "The scenery in " + this._park.name + " is amazing this time of year!";
    }

};

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
    dashcode.setupParts();
}

// Sample data.  Some applications may have static data like this, but most will want to use information fetched remotely via XMLHttpRequest.
var parks = [
    { name: "Clients", location: "Clients" },
    { name: "Prospects", location: "Prospects" },
    { name: "Contacts", location: "Contacts" },
    { name: "Interventions", location: "Interventions" }
];


// This object implements the dataSource methods for the list.
var clientList = {

    // Sample data for the content of the list.
    // Your application may also fetch this data remotely via XMLHttpRequest.
    _rowData: ["Item 1", "Item 2", "Item 3"],
    _hasFetch_all : false,
    _dataArray: {},
    _dataLength: 0,

    _fetch_all: function(){
        this._dataLength=0;
        var self = this;
        jQuery.ajax({
            url: 'ajax/iphone-xml_response.php',
            data:"type=client&action=list",
            datatype:"xml",
            type:"POST",
            cache: true,
            async: false,
            success:function(msg){
                var arr = new Array();
                jQuery(msg).find("soc").each(function(){
                    self._dataLength++;
                    var id = jQuery(this).attr('id');
                    var nom = jQuery(this).text();
                    var codeCli = jQuery(this).attr('codeCli');
                    arr.push([{
                        id: id,
                        code: codeCli,
                        nom: nom
                    }]);
                });
                self._dataArray=arr;
                self._hasFetch_all = true;
            }
        });
    },

    // The List calls this method to find out how many rows should be in the list.
    numberOfRows: function() {
        if (!this._hasFetch_all) this._fetch_all();
        return this._dataLength;
    },

    // The List calls this method once for every row.
    prepareRow: function(rowElement, rowIndex, templateElements) {
        if (!this._hasFetch_all) this._fetch_all();
        if (templateElements.label) {
            templateElements.label.innerText = this._dataArray[rowIndex].nom;
        }
        var tmp = document.createElement('div');
            tmp.className = "Ã©tiquette_template";
            tmp.innerText = this._dataArray[rowIndex][0].nom;
            tmp.id = this._dataArray[rowIndex][0].id;
        rowElement.innerText = "";
        rowElement.appendChild(tmp);
        // Assign a click event handler for the row.
        var self=this;
        rowElement.onclick = function(event) {
            if (!self._hasFetch_all) self._fetch_all();
            //Affiche le detail du client

            alert("Row: "+rowIndex+ " Nom: "+self._dataArray[rowIndex][0].nom+ " codeCli: "+self._dataArray[rowIndex][0].code);
            //browser.goForward(document.getElementById('menuClientDetail'), self._dataArray[rowIndex][0].nom);
        };
    }
};


// This object implements the dataSource methods for the list.
var prospectList = {

    // Sample data for the content of the list.
    // Your application may also fetch this data remotely via XMLHttpRequest.
    _rowData: ["Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 6"],
    _xmlrowData: function()
    {
        var toto = ["yyItem 1", "yyItem 2", "yyItem 3", "yyItem 4", "yyItem 5", "yyItem 6"];
        return(toto);
    },
    // The List calls this method to find out how many rows should be in the list.
    numberOfRows: function() {
        return this._xmlrowData().length;
    },

    // The List calls this method once for every row.
    prepareRow: function(rowElement, rowIndex, templateElements) {
        // templateElements contains references to all elements that have an id in the template row.
        // Ex: set the value of an element with id="label".
            _rowData=this._xmlrowData();
        if (templateElements.label) {
            templateElements.label.innerText = _rowData[rowIndex];
       }
        // Assign a click event handler for the row.
        rowElement.onclick = function(event) {
            // Do something interesting
        };
    }
};

// Called when an XMLHttpRequest loads a feed; works with the XMLHttpRequest setup snippet
function xmlLoaded(xmlRequest)
{
    if (xmlRequest.status == 200) {
        // Parse and interpret results
        // XML results found in xmlRequest.responseXML
        // Text results found in xmlRequest.responseText
        //alert(xmlRequest.responseText);
        return(1);
    }
    else {
        alert("Error fetching data: HTTP status " + xmlRequest.status);
    }
}

// This object implements the dataSource methods for the list.
var listContact = {

    // Sample data for the content of the list.
    // Your application may also fetch this data remotely via XMLHttpRequest.
    _rowData: ["Item 1", "Item 2", "Item 3"],

    // The List calls this method to find out how many rows should be in the list.
    numberOfRows: function() {
        return this._rowData.length;
    },

    // The List calls this method once for every row.
    prepareRow: function(rowElement, rowIndex, templateElements) {
        // templateElements contains references to all elements that have an id in the template row.
        // Ex: set the value of an element with id="label".
        if (templateElements.label) {
            templateElements.label.innerText = this._rowData[rowIndex];
        }

        // Assign a click event handler for the row.
        rowElement.onclick = function(event) {
            // Do something interesting
            alert("Row "+rowIndex);
        };
    }
};
